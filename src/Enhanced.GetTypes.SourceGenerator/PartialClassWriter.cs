using System.CodeDom.Compiler;

namespace Enhanced.GetTypes.SourceGenerator;

internal class PartialClassWriter : IDisposable
{
    private readonly StringWriter _innerWriter;
    private readonly IndentedTextWriter _indentedWriter;

    public PartialClassWriter()
    {
        _innerWriter = new StringWriter();
        _indentedWriter = new IndentedTextWriter(_innerWriter);
    }

    public void WriteAutoGeneratedHeader()
    {
        _indentedWriter.WriteLine("// <auto-generated />");
    }

    public IDisposable BeginBracketedBlock(char open = '{', char close = '}')
    {
        return new BracketedBlockWriter(_indentedWriter, open, close);
    }

    public IDisposable BeginNamespace(INamespaceSymbol namespaceSymbol)
    {
        _indentedWriter.WriteLine($"namespace {namespaceSymbol.ToDisplayString()}");
        return BeginBracketedBlock();
    }

    public IDisposable BeginClass(INamedTypeSymbol namedTypeSymbol)
    {
        if (namedTypeSymbol.IsStatic)
        {
            _indentedWriter.Write("static ");
        }

        _indentedWriter.WriteLine($"partial class {namedTypeSymbol.Name}");
        return BeginBracketedBlock();
    }

    public IDisposable BeginMethod(IMethodSymbol methodSymbol)
    {
        switch (methodSymbol.DeclaredAccessibility)
        {
            case Accessibility.NotApplicable:
                break;
            case Accessibility.Private:
                _indentedWriter.Write("private ");
                break;
            case Accessibility.ProtectedAndInternal:
                _indentedWriter.Write("protected internal ");
                break;
            case Accessibility.Protected:
                _indentedWriter.Write("protected ");
                break;
            case Accessibility.Internal:
                _indentedWriter.Write("internal ");
                break;
            case Accessibility.ProtectedOrInternal:
                _indentedWriter.Write("protected internal ");
                break;
            case Accessibility.Public:
                _indentedWriter.Write("public ");
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        if (methodSymbol.IsStatic)
        {
            _indentedWriter.Write("static ");
        }

        _indentedWriter.WriteLine($"partial {methodSymbol.ReturnType.ToDisplayString()} {methodSymbol.Name}()");
        return BeginBracketedBlock();
    }

    public void WriteLine(string value)
    {
        _indentedWriter.WriteLine(value);
    }

    public override string ToString()
    {
        _indentedWriter.Flush();
        return _innerWriter.ToString();
    }

    public void Dispose()
    {
        _indentedWriter.Dispose();
        _innerWriter.Dispose();
    }

    private class BracketedBlockWriter : IDisposable
    {
        private readonly IndentedTextWriter _indentedWriter;
        private readonly char _close;

        public BracketedBlockWriter(IndentedTextWriter indentedWriter, char open, char close)
        {
            _indentedWriter = indentedWriter;
            _close = close;

            _indentedWriter.WriteLine(open);
            _indentedWriter.Indent++;
        }

        public void Dispose()
        {
            _indentedWriter.Indent--;
            _indentedWriter.WriteLine(_close);
        }
    }
}
